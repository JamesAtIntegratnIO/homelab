name: Generate Monitoring Manifests

on:
  push:
    branches:
      - main
    paths:
      - 'monitoring/**'
      - .github/workflows/generate-monitoring-manifests.yaml

jobs:
  template_the_monitoring_manifests:
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          ref: main
      - run: |
          git config user.name ""github-actions[bot]""
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: 'v3.14.4'
      
      - name: Get Directories for Processing
        run: |
            dirs=$(find "$(pwd)" -type d -regex '.*/monitoring/[^/]+/overlays/[^/]+' | tr '\n' ',')
            echo "dirs=${dirs%,}" >> $GITHUB_ENV

      - name: Add Helm repositories dynamically
        run: |
          IFS=',' read -r -a dir_array <<< "${dirs}"  # Split dirs into an array based on comma delimiter
          for dir in "${dir_array[@]}"; do  # Iterate over each element in the array
            echo "Checking directory: $dir"  # Debug output
            if [ -d "$dir" ]; then
              cd $dir
              cd ../../base
              # Check if Chart.yaml exists
              if [ -f Chart.yaml ]; then
                pwd  # Debug: print current directory after cd
                dependencies=$(yq e '.dependencies[] | (.name + "=" + .repository)' Chart.yaml)
                IFS=$'\n'  # Change the internal field separator to new line for looping
                for dep in $dependencies; do
                  repo_name="${dep%=*}"  # Everything before the '='
                  repo_url="${dep#*=}"  # Everything after the '='
                  
                  # Check if the repository URL is not null
                  if [ ! -z "$repo_url" ]; then
                    echo "Adding Helm repository $repo_name from $repo_url"
                    helm repo add "$repo_name" "$repo_url"
                  fi
                done
                helm repo update
              else
                echo "Chart.yaml does not exist in the base directory"
              fi
            else
              echo "$dir does not exist."
            fi
            cd $GITHUB_WORKSPACE  # Return to the initial directory
          done

      - name: Template Helm charts
        run: |
          IFS=',' read -r -a dir_array <<< "${dirs}"  # Split dirs into an array based on comma delimiter
          ls -lah  # List all files and directories in the current working directory
          for dir in "${dir_array[@]}"; do  # Iterate over each element in the array
            if [ -d "$dir" ]; then
              cd $dir
              cd ../../base
              # Check if Chart.yaml exists before proceeding
              if [ -f Chart.yaml ]; then
                cd $dir
                BASE_NAMESPACE=$(cat ../../base/kustomization.yaml | yq e '.namespace // "default"' -)
                NAMESPACE=$(cat kustomization.yaml | yq e ".namespace // \"$BASE_NAMESPACE\"" -)
                helm dependency build ../../base
                touch ../../base/values.yaml
                touch values.yaml
                echo "Templating Helm chart in $dir"
                helm template \
                  --release-name ${NAMESPACE} \
                  ../../base \
                  -f ../../base/values.yaml \
                  --include-crds \
                  -f values.yaml > helm-all.yaml
              else
                echo "Chart.yaml does not exist in $dir"
                cd $dir

              fi
              cd $dir
              echo "running kustomize build . > all.yaml"
              kustomize build . > all.yaml
              git add all.yaml
            else
              echo "$dir does not exist."
            fi
            cd $GITHUB_WORKSPACE  # Return to the initial directory
          done
      - name: Commit changes to monitoring branch
        run: |
          git fetch origin monitoring:monitoring || true  # Fetch the monitoring branch if it exists, don't fail if it doesn't
          # Stash the committed files
          git stash
          # Check if the branch exists, if it does switch to it, otherwise create it
          if git show-ref --verify --quiet refs/heads/monitoring; then
            git switch monitoring
          else
            git switch --create monitoring origin/monitoring || git switch --create monitoring
          fi
          # Delete all the code from the branch so its in a clean state
          git rm -rf . --quiet
          # Pop the stashed files
          git stash pop
          # Add only the files that were generated that will be applied by ArgoCD
          git add **/all.yaml
          # Check if there are changes to commit. This ensures we only trigger a commit which
          # would trigger ArgoCD to apply changes if there are actual changes to apply and we
          # didn't just rebuild the exact same manifests.
          if ! git diff --quiet --staged; then  # Ensure there are changes staged for commit
            git commit -m "${{ github.event.head_commit.message }}"
            git push --set-upstream origin monitoring
          else
            echo "No changes detected"
          fi