apiVersion: v1
data:
  falco.yaml: |-
    base_syscalls:
      custom_set: []
      repair: false
    buffered_outputs: false
    engine:
      kind: kmod
      kmod:
        buf_size_preset: 4
        drop_failed_exit: false
    file_output:
      enabled: false
      filename: ./events.txt
      keep_alive: false
    grpc:
      bind_address: unix:///run/falco/falco.sock
      enabled: false
      threadiness: 0
    grpc_output:
      enabled: false
    http_output:
      ca_bundle: ""
      ca_cert: ""
      ca_path: /etc/falco/certs/
      client_cert: /etc/falco/certs/client/client.crt
      client_key: /etc/falco/certs/client/client.key
      compress_uploads: false
      echo: false
      enabled: false
      insecure: false
      keep_alive: false
      mtls: false
      url: ""
      user_agent: falcosecurity/falco
    json_include_output_property: true
    json_include_tags_property: true
    json_output: false
    libs_logger:
      enabled: false
      severity: debug
    load_plugins: []
    log_level: info
    log_stderr: true
    log_syslog: true
    metrics:
      convert_memory_to_mb: true
      enabled: false
      include_empty_values: false
      interval: 1h
      kernel_event_counters_enabled: true
      libbpf_stats_enabled: true
      output_rule: true
      resource_utilization_enabled: true
      state_counters_enabled: true
    output_timeout: 2000
    outputs:
      max_burst: 1000
      rate: 0
    outputs_queue:
      capacity: 0
    plugins:
    - init_config: null
      library_path: libk8saudit.so
      name: k8saudit
      open_params: http://:9765/k8s-audit
    - library_path: libcloudtrail.so
      name: cloudtrail
    - init_config: ""
      library_path: libjson.so
      name: json
    priority: debug
    program_output:
      enabled: false
      keep_alive: false
      program: 'jq ''{text: .output}'' | curl -d @- -X POST https://hooks.slack.com/services/XXX'
    rule_matching: first
    rules_file:
    - /etc/falco/falco_rules.yaml
    - /etc/falco/falco_rules.local.yaml
    - /etc/falco/rules.d
    stdout_output:
      enabled: true
    syscall_event_drops:
      actions:
      - log
      - alert
      max_burst: 1
      rate: 0.03333
      simulate_drops: false
      threshold: 0.1
    syscall_event_timeouts:
      max_consecutives: 1000
    syslog_output:
      enabled: true
    time_format_iso_8601: false
    watch_config_files: true
    webserver:
      enabled: true
      k8s_healthz_endpoint: /healthz
      listen_port: 8765
      ssl_certificate: /etc/falco/falco.pem
      ssl_enabled: false
      threadiness: 0
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: falco
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: falco
    app.kubernetes.io/version: 0.37.1
    helm.sh/chart: falco-4.3.0
  name: falco
  namespace: falco
---
apiVersion: v1
data:
  falcoctl.yaml: |-
    artifact:
      allowedTypes:
      - rulesfile
      - plugin
      follow:
        every: 6h
        falcoversions: http://localhost:8765/versions
        pluginsDir: /plugins
        refs:
        - falco-rules:3
        rulesfilesDir: /rulesfiles
      install:
        pluginsDir: /plugins
        refs:
        - falco-rules:3
        resolveDeps: true
        rulesfilesDir: /rulesfiles
    indexes:
    - name: falcosecurity
      url: https://falcosecurity.github.io/falcoctl/index.yaml
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: falco
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: falco
    app.kubernetes.io/version: 0.37.1
    helm.sh/chart: falco-4.3.0
  name: falco-falcoctl
  namespace: falco
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/instance: falco
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: falco
    app.kubernetes.io/version: 0.37.1
    helm.sh/chart: falco-4.3.0
  name: falco
  namespace: falco
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: falco
      app.kubernetes.io/name: falco
  template:
    metadata:
      annotations:
        checksum/certs: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config: 10525f922d38b4b2e56252a526f394388e8f55a6dbcb05dcf1728f97afb35c95
        checksum/rules: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app.kubernetes.io/instance: falco
        app.kubernetes.io/name: falco
      name: falco
    spec:
      containers:
      - args:
        - /usr/bin/falco
        - --cri
        - /run/containerd/containerd.sock
        - --cri
        - /run/crio/crio.sock
        - -pk
        env:
        - name: HOST_ROOT
          value: /host
        - name: FALCO_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: FALCO_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: docker.io/falcosecurity/falco-no-driver:0.37.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8765
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
        name: falco
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8765
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1000m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 512Mi
        securityContext:
          privileged: true
        tty: false
        volumeMounts:
        - mountPath: /etc/falco
          name: rulesfiles-install-dir
        - mountPath: /usr/share/falco/plugins
          name: plugins-install-dir
        - mountPath: /root/.falco
          name: root-falco-fs
        - mountPath: /host/proc
          name: proc-fs
        - mountPath: /host/etc
          name: etc-fs
          readOnly: true
        - mountPath: /host/dev
          name: dev-fs
          readOnly: true
        - mountPath: /sys/module/falco
          name: sys-fs
        - mountPath: /host/var/run/docker.sock
          name: docker-socket
        - mountPath: /host/run/containerd/containerd.sock
          name: containerd-socket
        - mountPath: /host/run/crio/crio.sock
          name: crio-socket
        - mountPath: /etc/falco/falco.yaml
          name: falco-yaml
          subPath: falco.yaml
      - args:
        - artifact
        - follow
        - --log-format=json
        env: null
        image: docker.io/falcosecurity/falcoctl:0.7.2
        imagePullPolicy: IfNotPresent
        name: falcoctl-artifact-follow
        securityContext: null
        volumeMounts:
        - mountPath: /plugins
          name: plugins-install-dir
        - mountPath: /rulesfiles
          name: rulesfiles-install-dir
        - mountPath: /etc/falcoctl
          name: falcoctl-config-volume
      initContainers:
      - args: null
        env:
        - name: HOST_ROOT
          value: /host
        image: docker.io/falcosecurity/falco-driver-loader:0.37.1
        imagePullPolicy: IfNotPresent
        name: falco-driver-loader
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /root/.falco
          name: root-falco-fs
        - mountPath: /host/proc
          name: proc-fs
          readOnly: true
        - mountPath: /host/boot
          name: boot-fs
          readOnly: true
        - mountPath: /host/lib/modules
          name: lib-modules
        - mountPath: /host/usr
          name: usr-fs
          readOnly: true
        - mountPath: /host/etc
          name: etc-fs
          readOnly: true
      - args:
        - artifact
        - install
        - --log-format=json
        env: null
        image: docker.io/falcosecurity/falcoctl:0.7.2
        imagePullPolicy: IfNotPresent
        name: falcoctl-artifact-install
        securityContext: null
        volumeMounts:
        - mountPath: /plugins
          name: plugins-install-dir
        - mountPath: /rulesfiles
          name: rulesfiles-install-dir
        - mountPath: /etc/falcoctl
          name: falcoctl-config-volume
      serviceAccountName: default
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      volumes:
      - emptyDir: {}
        name: plugins-install-dir
      - emptyDir: {}
        name: rulesfiles-install-dir
      - emptyDir: {}
        name: root-falco-fs
      - hostPath:
          path: /boot
        name: boot-fs
      - hostPath:
          path: /lib/modules
        name: lib-modules
      - hostPath:
          path: /usr
        name: usr-fs
      - hostPath:
          path: /etc
        name: etc-fs
      - hostPath:
          path: /dev
        name: dev-fs
      - hostPath:
          path: /sys/module/falco
        name: sys-fs
      - hostPath:
          path: /var/run/docker.sock
        name: docker-socket
      - hostPath:
          path: /run/containerd/containerd.sock
        name: containerd-socket
      - hostPath:
          path: /run/crio/crio.sock
        name: crio-socket
      - hostPath:
          path: /proc
        name: proc-fs
      - configMap:
          items:
          - key: falcoctl.yaml
            path: falcoctl.yaml
          name: falco-falcoctl
        name: falcoctl-config-volume
      - configMap:
          items:
          - key: falco.yaml
            path: falco.yaml
          name: falco
        name: falco-yaml
  updateStrategy:
    type: RollingUpdate
