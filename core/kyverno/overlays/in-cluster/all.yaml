apiVersion: v1
kind: Namespace
metadata:
  labels:
    backstage.io/kubernetes-id: kyverno
    goldilocks.fairwinds.com/enabled: "true"
  name: kyverno
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-admission-controller
  namespace: kyverno
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-background-controller
  namespace: kyverno
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-controller
  namespace: kyverno
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-jobs
  namespace: kyverno
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "100"
  labels:
    app.kubernetes.io/component: hooks
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-migrate-resources
  namespace: kyverno
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-reports-controller
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:admission-controller
  namespace: kyverno
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
- apiGroups:
  - ""
  resourceNames:
  - kyverno
  - kyverno-metrics
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - get
  - patch
  - update
- apiGroups:
  - apps
  resources:
  - deployments
  - deployments/scale
  verbs:
  - get
  - list
  - watch
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:background-controller
  namespace: kyverno
rules:
- apiGroups:
  - ""
  resourceNames:
  - kyverno
  - kyverno-metrics
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - kyverno-background-controller
  resources:
  - leases
  verbs:
  - delete
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:cleanup-controller
  namespace: kyverno
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
- apiGroups:
  - ""
  resourceNames:
  - kyverno-cleanup-controller.default.svc.kyverno-tls-ca
  - kyverno-cleanup-controller.default.svc.kyverno-tls-pair
  resources:
  - secrets
  verbs:
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resourceNames:
  - kyverno
  - kyverno-metrics
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - kyverno-cleanup-controller
  resources:
  - leases
  verbs:
  - delete
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:reports-controller
  namespace: kyverno
rules:
- apiGroups:
  - ""
  resourceNames:
  - kyverno
  - kyverno-metrics
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - kyverno-reports-controller
  resources:
  - leases
  verbs:
  - delete
  - get
  - patch
  - update
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      app.kubernetes.io/component: admission-controller
      app.kubernetes.io/instance: kyverno
      app.kubernetes.io/part-of: kyverno
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:admission-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:admission-controller:core
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - clusterroles
  - rolebindings
  - clusterrolebindings
  verbs:
  - list
  - watch
- apiGroups:
  - kyverno.io
  resources:
  - policies
  - policies/status
  - clusterpolicies
  - clusterpolicies/status
  - updaterequests
  - updaterequests/status
  - globalcontextentries
  - globalcontextentries/status
  - admissionreports
  - clusteradmissionreports
  - backgroundscanreports
  - clusterbackgroundscanreports
  - policyexceptions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - reports.kyverno.io
  resources:
  - ephemeralreports
  - clusterephemeralreports
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - wgpolicyk8s.io
  resources:
  - policyreports
  - policyreports/status
  - clusterpolicyreports
  - clusterpolicyreports/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - update
  - patch
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      app.kubernetes.io/component: background-controller
      app.kubernetes.io/instance: kyverno
      app.kubernetes.io/part-of: kyverno
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:background-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:background-controller:core
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - kyverno.io
  resources:
  - policies
  - clusterpolicies
  - policyexceptions
  - updaterequests
  - updaterequests/status
  - globalcontextentries
  - globalcontextentries/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - ""
  resources:
  - namespaces
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingressclasses
  - networkpolicies
  verbs:
  - create
  - update
  - patch
  - delete
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs:
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - resourcequotas
  - limitranges
  verbs:
  - create
  - update
  - patch
  - delete
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      app.kubernetes.io/component: cleanup-controller
      app.kubernetes.io/instance: kyverno
      app.kubernetes.io/part-of: kyverno
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:cleanup-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:cleanup-controller:core
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - kyverno.io
  resources:
  - clustercleanuppolicies
  - cleanuppolicies
  verbs:
  - list
  - watch
- apiGroups:
  - kyverno.io
  resources:
  - globalcontextentries
  - globalcontextentries/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - kyverno.io
  resources:
  - clustercleanuppolicies/status
  - cleanuppolicies/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:cleanup-jobs
rules:
- apiGroups:
  - kyverno.io
  resources:
  - admissionreports
  - clusteradmissionreports
  verbs:
  - list
  - deletecollection
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
    helm.sh/hook-weight: "100"
  labels:
    app.kubernetes.io/component: hooks
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:migrate-resources
rules:
- apiGroups:
  - kyverno.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions/status
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kyverno:rbac:admin:policies
rules:
- apiGroups:
  - kyverno.io
  resources:
  - cleanuppolicies
  - clustercleanuppolicies
  - policies
  - clusterpolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kyverno:rbac:admin:policyreports
rules:
- apiGroups:
  - wgpolicyk8s.io
  resources:
  - policyreports
  - clusterpolicyreports
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kyverno:rbac:admin:reports
rules:
- apiGroups:
  - kyverno.io
  resources:
  - admissionreports
  - clusteradmissionreports
  - backgroundscanreports
  - clusterbackgroundscanreports
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - reports.kyverno.io
  resources:
  - ephemeralreports
  - clusterephemeralreports
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kyverno:rbac:admin:updaterequests
rules:
- apiGroups:
  - kyverno.io
  resources:
  - updaterequests
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kyverno:rbac:view:policies
rules:
- apiGroups:
  - kyverno.io
  resources:
  - cleanuppolicies
  - clustercleanuppolicies
  - policies
  - clusterpolicies
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kyverno:rbac:view:policyreports
rules:
- apiGroups:
  - wgpolicyk8s.io
  resources:
  - policyreports
  - clusterpolicyreports
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kyverno:rbac:view:reports
rules:
- apiGroups:
  - kyverno.io
  resources:
  - admissionreports
  - clusteradmissionreports
  - backgroundscanreports
  - clusterbackgroundscanreports
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - reports.kyverno.io
  resources:
  - ephemeralreports
  - clusterephemeralreports
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kyverno:rbac:view:updaterequests
rules:
- apiGroups:
  - kyverno.io
  resources:
  - updaterequests
  verbs:
  - get
  - list
  - watch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      app.kubernetes.io/component: reports-controller
      app.kubernetes.io/instance: kyverno
      app.kubernetes.io/part-of: kyverno
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:reports-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:reports-controller:core
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - kyverno.io
  resources:
  - globalcontextentries
  - globalcontextentries/status
  - admissionreports
  - clusteradmissionreports
  - backgroundscanreports
  - clusterbackgroundscanreports
  - policyexceptions
  - policies
  - clusterpolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - reports.kyverno.io
  resources:
  - ephemeralreports
  - clusterephemeralreports
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - wgpolicyk8s.io
  resources:
  - policyreports
  - policyreports/status
  - clusterpolicyreports
  - clusterpolicyreports/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
  - deletecollection
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:admission-controller
  namespace: kyverno
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kyverno:admission-controller
subjects:
- kind: ServiceAccount
  name: kyverno-admission-controller
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:background-controller
  namespace: kyverno
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kyverno:background-controller
subjects:
- kind: ServiceAccount
  name: kyverno-background-controller
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:cleanup-controller
  namespace: kyverno
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kyverno:cleanup-controller
subjects:
- kind: ServiceAccount
  name: kyverno-cleanup-controller
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:reports-controller
  namespace: kyverno
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kyverno:reports-controller
subjects:
- kind: ServiceAccount
  name: kyverno-reports-controller
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:admission-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyverno:admission-controller
subjects:
- kind: ServiceAccount
  name: kyverno-admission-controller
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:background-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyverno:background-controller
subjects:
- kind: ServiceAccount
  name: kyverno-background-controller
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:cleanup-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyverno:cleanup-controller
subjects:
- kind: ServiceAccount
  name: kyverno-cleanup-controller
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:cleanup-jobs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyverno:cleanup-jobs
subjects:
- kind: ServiceAccount
  name: kyverno-cleanup-jobs
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
    helm.sh/hook-weight: "100"
  labels:
    app.kubernetes.io/component: hooks
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:migrate-resources
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyverno:migrate-resources
subjects:
- kind: ServiceAccount
  name: kyverno-migrate-resources
  namespace: kyverno
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno:reports-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyverno:reports-controller
subjects:
- kind: ServiceAccount
  name: kyverno-reports-controller
  namespace: kyverno
---
apiVersion: v1
data:
  defaultRegistry: docker.io
  enableDefaultRegistryMutation: "true"
  excludeGroups: system:nodes
  generateSuccessEvents: "false"
  resourceFilters: '[*/*,default,*] [Event,*,*] [*/*,kube-system,*] [*/*,kube-public,*]
    [*/*,kube-node-lease,*] [Node,*,*] [Node/*,*,*] [APIService,*,*] [APIService/*,*,*]
    [TokenReview,*,*] [SubjectAccessReview,*,*] [SelfSubjectAccessReview,*,*] [Binding,*,*]
    [Pod/binding,*,*] [ReplicaSet,*,*] [ReplicaSet/*,*,*] [ClusterRole,*,kyverno:admission-controller]
    [ClusterRole,*,kyverno:admission-controller:core] [ClusterRole,*,kyverno:admission-controller:additional]
    [ClusterRole,*,kyverno:background-controller] [ClusterRole,*,kyverno:background-controller:core]
    [ClusterRole,*,kyverno:background-controller:additional] [ClusterRole,*,kyverno:cleanup-controller]
    [ClusterRole,*,kyverno:cleanup-controller:core] [ClusterRole,*,kyverno:cleanup-controller:additional]
    [ClusterRole,*,kyverno:reports-controller] [ClusterRole,*,kyverno:reports-controller:core]
    [ClusterRole,*,kyverno:reports-controller:additional] [ClusterRoleBinding,*,kyverno:admission-controller]
    [ClusterRoleBinding,*,kyverno:background-controller] [ClusterRoleBinding,*,kyverno:cleanup-controller]
    [ClusterRoleBinding,*,kyverno:reports-controller] [ServiceAccount,default,kyverno-admission-controller]
    [ServiceAccount/*,default,kyverno-admission-controller] [ServiceAccount,default,kyverno-background-controller]
    [ServiceAccount/*,default,kyverno-background-controller] [ServiceAccount,default,kyverno-cleanup-controller]
    [ServiceAccount/*,default,kyverno-cleanup-controller] [ServiceAccount,default,kyverno-reports-controller]
    [ServiceAccount/*,default,kyverno-reports-controller] [Role,default,kyverno:admission-controller]
    [Role,default,kyverno:background-controller] [Role,default,kyverno:cleanup-controller]
    [Role,default,kyverno:reports-controller] [RoleBinding,default,kyverno:admission-controller]
    [RoleBinding,default,kyverno:background-controller] [RoleBinding,default,kyverno:cleanup-controller]
    [RoleBinding,default,kyverno:reports-controller] [ConfigMap,default,kyverno] [ConfigMap,default,kyverno-metrics]
    [Deployment,default,kyverno-admission-controller] [Deployment/*,default,kyverno-admission-controller]
    [Deployment,default,kyverno-background-controller] [Deployment/*,default,kyverno-background-controller]
    [Deployment,default,kyverno-cleanup-controller] [Deployment/*,default,kyverno-cleanup-controller]
    [Deployment,default,kyverno-reports-controller] [Deployment/*,default,kyverno-reports-controller]
    [Pod,default,kyverno-admission-controller-*] [Pod/*,default,kyverno-admission-controller-*]
    [Pod,default,kyverno-background-controller-*] [Pod/*,default,kyverno-background-controller-*]
    [Pod,default,kyverno-cleanup-controller-*] [Pod/*,default,kyverno-cleanup-controller-*]
    [Pod,default,kyverno-reports-controller-*] [Pod/*,default,kyverno-reports-controller-*]
    [Job,default,kyverno-hook-pre-delete] [Job/*,default,kyverno-hook-pre-delete]
    [NetworkPolicy,default,kyverno-admission-controller] [NetworkPolicy/*,default,kyverno-admission-controller]
    [NetworkPolicy,default,kyverno-background-controller] [NetworkPolicy/*,default,kyverno-background-controller]
    [NetworkPolicy,default,kyverno-cleanup-controller] [NetworkPolicy/*,default,kyverno-cleanup-controller]
    [NetworkPolicy,default,kyverno-reports-controller] [NetworkPolicy/*,default,kyverno-reports-controller]
    [PodDisruptionBudget,default,kyverno-admission-controller] [PodDisruptionBudget/*,default,kyverno-admission-controller]
    [PodDisruptionBudget,default,kyverno-background-controller] [PodDisruptionBudget/*,default,kyverno-background-controller]
    [PodDisruptionBudget,default,kyverno-cleanup-controller] [PodDisruptionBudget/*,default,kyverno-cleanup-controller]
    [PodDisruptionBudget,default,kyverno-reports-controller] [PodDisruptionBudget/*,default,kyverno-reports-controller]
    [Service,default,kyverno-svc] [Service/*,default,kyverno-svc] [Service,default,kyverno-svc-metrics]
    [Service/*,default,kyverno-svc-metrics] [Service,default,kyverno-background-controller-metrics]
    [Service/*,default,kyverno-background-controller-metrics] [Service,default,kyverno-cleanup-controller]
    [Service/*,default,kyverno-cleanup-controller] [Service,default,kyverno-cleanup-controller-metrics]
    [Service/*,default,kyverno-cleanup-controller-metrics] [Service,default,kyverno-reports-controller-metrics]
    [Service/*,default,kyverno-reports-controller-metrics] [ServiceMonitor,default,kyverno-admission-controller]
    [ServiceMonitor,default,kyverno-background-controller] [ServiceMonitor,default,kyverno-cleanup-controller]
    [ServiceMonitor,default,kyverno-reports-controller] [Secret,default,kyverno-svc.default.svc.*]
    [Secret,default,kyverno-cleanup-controller.default.svc.*]'
  webhookAnnotations: '{"admissions.enforcer/disabled":"true"}'
  webhooks: '[{"namespaceSelector":{"matchExpressions":[{"key":"kubernetes.io/metadata.name","operator":"NotIn","values":["kube-system"]},{"key":"kubernetes.io/metadata.name","operator":"NotIn","values":["default"]}],"matchLabels":null}}]'
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: config
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno
  namespace: kyverno
---
apiVersion: v1
data:
  bucketBoundaries: 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10, 15, 20,
    25, 30
  namespaces: '{"exclude":[],"include":[]}'
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: config
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-metrics
  namespace: kyverno
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-background-controller-metrics
  namespace: kyverno
spec:
  ports:
  - name: metrics-port
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/part-of: kyverno
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-controller
  namespace: kyverno
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/part-of: kyverno
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-controller-metrics
  namespace: kyverno
spec:
  ports:
  - name: metrics-port
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/part-of: kyverno
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-reports-controller-metrics
  namespace: kyverno
spec:
  ports:
  - name: metrics-port
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/part-of: kyverno
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-svc
  namespace: kyverno
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/part-of: kyverno
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-svc-metrics
  namespace: kyverno
spec:
  ports:
  - name: metrics-port
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/part-of: kyverno
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-admission-controller
  namespace: kyverno
spec:
  replicas: null
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: admission-controller
      app.kubernetes.io/instance: kyverno
      app.kubernetes.io/part-of: kyverno
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 40%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-controller
        app.kubernetes.io/instance: kyverno
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: kyverno
        app.kubernetes.io/version: 3.2.0
        helm.sh/chart: kyverno-3.2.0
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - admission-controller
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - --caSecretName=kyverno-svc.default.svc.kyverno-tls-ca
        - --tlsSecretName=kyverno-svc.default.svc.kyverno-tls-pair
        - --backgroundServiceAccountName=system:serviceaccount:default:kyverno-background-controller
        - --servicePort=443
        - --webhookServerPort=9443
        - --disableMetrics=false
        - --otelConfig=prometheus
        - --metricsPort=8000
        - --admissionReports=true
        - --autoUpdateWebhooks=true
        - --enableConfigMapCaching=true
        - --enableDeferredLoading=true
        - --dumpPayload=false
        - --forceFailurePolicyIgnore=false
        - --generateValidatingAdmissionPolicy=false
        - --maxAPICallResponseLength=2000000
        - --loggingFormat=text
        - --v=2
        - --omitEvents=PolicyApplied,PolicySkipped
        - --enablePolicyException=true
        - --protectManagedResources=false
        - --allowInsecureRegistry=false
        - --registryCredentialHelpers=default,google,amazon,azure,github
        env:
        - name: INIT_CONFIG
          value: kyverno
        - name: METRICS_CONFIG
          value: kyverno-metrics
        - name: KYVERNO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KYVERNO_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KYVERNO_SERVICEACCOUNT_NAME
          value: kyverno-admission-controller
        - name: KYVERNO_SVC
          value: kyverno-svc
        - name: TUF_ROOT
          value: /.sigstore
        - name: KYVERNO_DEPLOYMENT
          value: kyverno-admission-controller
        image: ghcr.io/kyverno/kyverno:v1.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /health/liveness
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 15
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: kyverno
        ports:
        - containerPort: 9443
          name: https
          protocol: TCP
        - containerPort: 8000
          name: metrics-port
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /health/readiness
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            memory: 384Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          failureThreshold: 20
          httpGet:
            path: /health/liveness
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 2
          periodSeconds: 6
        volumeMounts:
        - mountPath: /.sigstore
          name: sigstore
      dnsPolicy: ClusterFirst
      initContainers:
      - args:
        - --loggingFormat=text
        - --v=2
        env:
        - name: KYVERNO_SERVICEACCOUNT_NAME
          value: kyverno-admission-controller
        - name: INIT_CONFIG
          value: kyverno
        - name: METRICS_CONFIG
          value: kyverno-metrics
        - name: KYVERNO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KYVERNO_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KYVERNO_DEPLOYMENT
          value: kyverno-admission-controller
        - name: KYVERNO_SVC
          value: kyverno-svc
        image: ghcr.io/kyverno/kyvernopre:v1.12.0
        imagePullPolicy: IfNotPresent
        name: kyverno-pre
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      serviceAccountName: kyverno-admission-controller
      volumes:
      - emptyDir: {}
        name: sigstore
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: background-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-background-controller
  namespace: kyverno
spec:
  replicas: null
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: background-controller
      app.kubernetes.io/instance: kyverno
      app.kubernetes.io/part-of: kyverno
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 40%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: background-controller
        app.kubernetes.io/instance: kyverno
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: kyverno
        app.kubernetes.io/version: 3.2.0
        helm.sh/chart: kyverno-3.2.0
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - background-controller
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - --disableMetrics=false
        - --otelConfig=prometheus
        - --metricsPort=8000
        - --enableConfigMapCaching=true
        - --enableDeferredLoading=true
        - --maxAPICallResponseLength=2000000
        - --loggingFormat=text
        - --v=2
        - --omitEvents=PolicyApplied,PolicySkipped
        - --enablePolicyException=true
        env:
        - name: KYVERNO_SERVICEACCOUNT_NAME
          value: kyverno-background-controller
        - name: KYVERNO_DEPLOYMENT
          value: kyverno-background-controller
        - name: INIT_CONFIG
          value: kyverno
        - name: METRICS_CONFIG
          value: kyverno-metrics
        - name: KYVERNO_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KYVERNO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: ghcr.io/kyverno/background-controller:v1.12.0
        imagePullPolicy: IfNotPresent
        name: controller
        ports:
        - containerPort: 9443
          name: https
          protocol: TCP
        - containerPort: 8000
          name: metrics
          protocol: TCP
        resources:
          limits:
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      dnsPolicy: ClusterFirst
      serviceAccountName: kyverno-background-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-controller
  namespace: kyverno
spec:
  replicas: null
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: cleanup-controller
      app.kubernetes.io/instance: kyverno
      app.kubernetes.io/part-of: kyverno
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 40%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: cleanup-controller
        app.kubernetes.io/instance: kyverno
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: kyverno
        app.kubernetes.io/version: 3.2.0
        helm.sh/chart: kyverno-3.2.0
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - cleanup-controller
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - --caSecretName=kyverno-cleanup-controller.default.svc.kyverno-tls-ca
        - --tlsSecretName=kyverno-cleanup-controller.default.svc.kyverno-tls-pair
        - --servicePort=443
        - --cleanupServerPort=9443
        - --webhookServerPort=9443
        - --disableMetrics=false
        - --otelConfig=prometheus
        - --metricsPort=8000
        - --enableDeferredLoading=true
        - --dumpPayload=false
        - --maxAPICallResponseLength=2000000
        - --loggingFormat=text
        - --v=2
        - --protectManagedResources=false
        - --ttlReconciliationInterval=1m
        env:
        - name: KYVERNO_DEPLOYMENT
          value: kyverno-cleanup-controller
        - name: INIT_CONFIG
          value: kyverno
        - name: METRICS_CONFIG
          value: kyverno-metrics
        - name: KYVERNO_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KYVERNO_SERVICEACCOUNT_NAME
          value: kyverno-cleanup-controller
        - name: KYVERNO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KYVERNO_SVC
          value: kyverno-cleanup-controller
        image: ghcr.io/kyverno/cleanup-controller:v1.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /health/liveness
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 15
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: controller
        ports:
        - containerPort: 9443
          name: https
          protocol: TCP
        - containerPort: 8000
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /health/readiness
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          failureThreshold: 20
          httpGet:
            path: /health/liveness
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 2
          periodSeconds: 6
      dnsPolicy: ClusterFirst
      serviceAccountName: kyverno-cleanup-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: reports-controller
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-reports-controller
  namespace: kyverno
spec:
  replicas: null
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: reports-controller
      app.kubernetes.io/instance: kyverno
      app.kubernetes.io/part-of: kyverno
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 40%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: reports-controller
        app.kubernetes.io/instance: kyverno
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: kyverno
        app.kubernetes.io/version: 3.2.0
        helm.sh/chart: kyverno-3.2.0
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - reports-controller
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - --disableMetrics=false
        - --otelConfig=prometheus
        - --metricsPort=8000
        - --admissionReports=true
        - --aggregateReports=true
        - --policyReports=true
        - --validatingAdmissionPolicyReports=false
        - --backgroundScan=true
        - --backgroundScanWorkers=2
        - --backgroundScanInterval=1h
        - --skipResourceFilters=true
        - --enableConfigMapCaching=true
        - --enableDeferredLoading=true
        - --maxAPICallResponseLength=2000000
        - --loggingFormat=text
        - --v=2
        - --omitEvents=PolicyApplied,PolicySkipped
        - --enablePolicyException=true
        - --reportsChunkSize=0
        - --allowInsecureRegistry=false
        - --registryCredentialHelpers=default,google,amazon,azure,github
        env:
        - name: KYVERNO_SERVICEACCOUNT_NAME
          value: kyverno-reports-controller
        - name: KYVERNO_DEPLOYMENT
          value: kyverno-reports-controller
        - name: INIT_CONFIG
          value: kyverno
        - name: METRICS_CONFIG
          value: kyverno-metrics
        - name: KYVERNO_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KYVERNO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TUF_ROOT
          value: /.sigstore
        image: ghcr.io/kyverno/reports-controller:v1.12.0
        imagePullPolicy: IfNotPresent
        name: controller
        ports:
        - containerPort: 9443
          name: https
          protocol: TCP
        - containerPort: 8000
          name: metrics
          protocol: TCP
        resources:
          limits:
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /.sigstore
          name: sigstore
      dnsPolicy: ClusterFirst
      serviceAccountName: kyverno-reports-controller
      volumes:
      - emptyDir: {}
        name: sigstore
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/component: cleanup
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-admission-reports
  namespace: kyverno
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        metadata: null
        spec:
          containers:
          - command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              COUNT=$(kubectl get admissionreports.kyverno.io -A | wc -l)
              if [ "$COUNT" -gt 10000 ]; then
                echo "too many reports found ($COUNT), cleaning up..."
                kubectl delete admissionreports.kyverno.io -A -l='!audit.kyverno.io/report.aggregate'
              else
                echo "($COUNT) reports found, no clean up needed"
              fi
            image: bitnami/kubectl:1.28.5
            imagePullPolicy: null
            name: cleanup
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              privileged: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              seccompProfile:
                type: RuntimeDefault
          restartPolicy: OnFailure
          serviceAccountName: kyverno-cleanup-jobs
  schedule: '*/10 * * * *'
  successfulJobsHistoryLimit: 1
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/component: cleanup
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-cluster-admission-reports
  namespace: kyverno
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        metadata: null
        spec:
          containers:
          - command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              COUNT=$(kubectl get clusteradmissionreports.kyverno.io -A | wc -l)
              if [ "$COUNT" -gt 10000 ]; then
                echo "too many reports found ($COUNT), cleaning up..."
                kubectl delete clusteradmissionreports.kyverno.io -A -l='!audit.kyverno.io/report.aggregate'
              else
                echo "($COUNT) reports found, no clean up needed"
              fi
            image: bitnami/kubectl:1.28.5
            imagePullPolicy: null
            name: cleanup
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              privileged: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              seccompProfile:
                type: RuntimeDefault
          restartPolicy: OnFailure
          serviceAccountName: kyverno-cleanup-jobs
  schedule: '*/10 * * * *'
  successfulJobsHistoryLimit: 1
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
  labels:
    app.kubernetes.io/component: hooks
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-clean-reports
  namespace: kyverno
spec:
  backoffLimit: 2
  template:
    metadata: null
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - "set -euo pipefail\nNAMESPACES=$(kubectl get namespaces --no-headers=true
          | awk '{print $1}')\n\nfor ns in ${NAMESPACES[@]};\ndo\n  COUNT=$(kubectl
          get policyreports.wgpolicyk8s.io -n $ns --no-headers=true | awk '/pol/{print
          $1}' | wc -l)\n\n  if [ $COUNT -gt 0 ]; then\n    echo \"deleting $COUNT
          policyreports in namespace $ns\"\n    kubectl get policyreports.wgpolicyk8s.io
          -n $ns --no-headers=true | awk '/pol/{print $1}' | xargs kubectl delete
          -n $ns policyreports.wgpolicyk8s.io\n  else\n    echo \"no policyreports
          in namespace $ns\"\n  fi\ndone\n\nCOUNT=$(kubectl get clusterpolicyreports.wgpolicyk8s.io
          --no-headers=true | awk '/pol/{print $1}' | wc -l)\n  \nif [ $COUNT -gt
          0 ]; then\n  echo \"deleting $COUNT clusterpolicyreports\"\n  kubectl get
          clusterpolicyreports.wgpolicyk8s.io --no-headers=true | awk '/pol/{print
          $1}' | xargs kubectl delete clusterpolicyreports.wgpolicyk8s.io\nelse\n
          \ echo \"no clusterpolicyreports\"\nfi\n"
        image: bitnami/kubectl:1.30.2
        imagePullPolicy: null
        name: kubectl
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: Never
      serviceAccount: kyverno-admission-controller
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
    helm.sh/hook-weight: "200"
  labels:
    app.kubernetes.io/component: hooks
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-migrate-resources
  namespace: kyverno
spec:
  backoffLimit: 2
  template:
    metadata: null
    spec:
      containers:
      - args:
        - migrate
        - --resource
        - cleanuppolicies.kyverno.io
        - --resource
        - clustercleanuppolicies.kyverno.io
        - --resource
        - clusterpolicies.kyverno.io
        - --resource
        - globalcontextentries.kyverno.io
        - --resource
        - policies.kyverno.io
        - --resource
        - policyexceptions.kyverno.io
        - --resource
        - updaterequests.kyverno.io
        image: ghcr.io/kyverno/kyverno-cli:v1.12.0
        imagePullPolicy: IfNotPresent
        name: kubectl
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: Never
      serviceAccount: kyverno-migrate-resources
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
  labels:
    app.kubernetes.io/component: hooks
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-scale-to-zero
  namespace: kyverno
spec:
  backoffLimit: 2
  template:
    metadata: null
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |-
          set -euo pipefail
          kubectl scale -n default deployment -l app.kubernetes.io/part-of=kyverno --replicas=0
          sleep 30
          kubectl delete validatingwebhookconfiguration -l webhook.kyverno.io/managed-by=kyverno
          kubectl delete mutatingwebhookconfiguration -l webhook.kyverno.io/managed-by=kyverno
        image: bitnami/kubectl:1.30.2
        imagePullPolicy: null
        name: kubectl
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: Never
      serviceAccount: kyverno-admission-controller
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Adding capabilities beyond those listed in the
      policy must be disallowed.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Capabilities
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: disallow-capabilities
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: adding-capabilities
    preconditions:
      all:
      - key: '{{ request.operation || ''BACKGROUND'' }}'
        operator: NotEquals
        value: DELETE
    validate:
      deny:
        conditions:
          all:
          - key: '{{ request.object.spec.[ephemeralContainers, initContainers, containers][].securityContext.capabilities.add[]
              }}'
            operator: AnyNotIn
            value:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SETFCAP
            - SETGID
            - SETPCAP
            - SETUID
            - SYS_CHROOT
      message: Any capabilities added beyond the allowed list (AUDIT_WRITE, CHOWN,
        DAC_OVERRIDE, FOWNER, FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP, SETGID,
        SETPCAP, SETUID, SYS_CHROOT) are disallowed.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces. This policy ensures fields which make use of these host namespaces
      are unset or set to `false`.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Host Namespaces
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: disallow-host-namespaces
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must be unset or set to `false`.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: HostPath volumes let Pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed. This policy ensures no
      hostPath volumes are in use.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod,Volume
    policies.kyverno.io/title: Disallow hostPath
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: disallow-host-path
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The field spec.volumes[*].hostPath
        must be unset.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list. This policy ensures the `hostPort` field is unset or set to `0`.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow hostPorts
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: disallow-host-ports
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: host-ports-none
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        , spec.initContainers[*].ports[*].hostPort, and spec.ephemeralContainers[*].ports[*].hostPort
        must either be unset or set to `0`.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(ports):
            - =(hostPort): 0
          =(initContainers):
          - =(ports):
            - =(hostPort): 0
          containers:
          - =(ports):
            - =(hostPort): 0
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Windows pods offer the ability to run HostProcess
      containers which enables privileged access to the Windows node. Privileged access
      to the host is disallowed in the baseline policy. HostProcess pods are an alpha
      feature as of Kubernetes v1.22. This policy ensures the `hostProcess` field,
      if present, is set to `false`.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow hostProcess
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: disallow-host-process
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: host-process-containers
    validate:
      message: HostProcess containers are disallowed. The fields spec.securityContext.windowsOptions.hostProcess,
        spec.containers[*].securityContext.windowsOptions.hostProcess, spec.initContainers[*].securityContext.windowsOptions.hostProcess,
        and spec.ephemeralContainers[*].securityContext.windowsOptions.hostProcess
        must either be undefined or set to `false`.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(windowsOptions):
                =(hostProcess): "false"
          =(initContainers):
          - =(securityContext):
              =(windowsOptions):
                =(hostProcess): "false"
          containers:
          - =(securityContext):
              =(windowsOptions):
                =(hostProcess): "false"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed. This policy ensures Pods do not call for privileged
      mode.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Privileged Containers
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: disallow-privileged-containers
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: privileged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must be unset or set
        to `false`.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(privileged): "false"
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required. This policy ensures nothing but the default
      procMount can be specified. Note that in order for users to deviate from the
      `Default` procMount requires setting a feature gate at the API server.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow procMount
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: disallow-proc-mount
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount, spec.initContainers[*].securityContext.procMount,
        and spec.ephemeralContainers[*].securityContext.procMount must be unset or
        set to `Default`.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(procMount): Default
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed. This policy ensures that the `seLinuxOptions` field
      is undefined.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow SELinux
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: disallow-selinux
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: selinux-type
    validate:
      message: Setting the SELinux type is restricted. The fields spec.securityContext.seLinuxOptions.type,
        spec.containers[*].securityContext.seLinuxOptions.type, , spec.initContainers[*].securityContext.seLinuxOptions,
        and spec.ephemeralContainers[*].securityContext.seLinuxOptions.type must either
        be unset or set to one of the allowed values (container_t, container_init_t,
        or container_kvm_t).
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(seLinuxOptions):
                =(type): container_t | container_init_t | container_kvm_t
          =(initContainers):
          - =(securityContext):
              =(seLinuxOptions):
                =(type): container_t | container_init_t | container_kvm_t
          =(securityContext):
            =(seLinuxOptions):
              =(type): container_t | container_init_t | container_kvm_t
          containers:
          - =(securityContext):
              =(seLinuxOptions):
                =(type): container_t | container_init_t | container_kvm_t
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: selinux-user-role
    validate:
      message: Setting the SELinux user or role is forbidden. The fields spec.securityContext.seLinuxOptions.user,
        spec.securityContext.seLinuxOptions.role, spec.containers[*].securityContext.seLinuxOptions.user,
        spec.containers[*].securityContext.seLinuxOptions.role, spec.initContainers[*].securityContext.seLinuxOptions.user,
        spec.initContainers[*].securityContext.seLinuxOptions.role, spec.ephemeralContainers[*].securityContext.seLinuxOptions.user,
        and spec.ephemeralContainers[*].securityContext.seLinuxOptions.role must be
        unset.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(seLinuxOptions):
                X(role): "null"
                X(user): "null"
          =(initContainers):
          - =(securityContext):
              =(seLinuxOptions):
                X(role): "null"
                X(user): "null"
          =(securityContext):
            =(seLinuxOptions):
              X(role): "null"
              X(user): "null"
          containers:
          - =(securityContext):
              =(seLinuxOptions):
                X(role): "null"
                X(user): "null"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default. The default policy should prevent overriding
      or disabling the policy, or restrict overrides to an allowed set of profiles.
      This policy ensures Pods do not specify any other AppArmor profiles than `runtime/default`
      or `localhost/*`.
    policies.kyverno.io/minversion: 1.3.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod, Annotation
    policies.kyverno.io/title: Restrict AppArmor
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: restrict-apparmor-profiles
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation `container.apparmor.security.beta.kubernetes.io`
        if defined must not be set to anything other than `runtime/default` or `localhost/*`.
      pattern:
        =(metadata):
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default |
              localhost/*
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: The seccomp profile must not be explicitly set
      to Unconfined. This policy, requiring Kubernetes v1.19 or later, ensures that
      seccomp is unset or set to `RuntimeDefault` or `Localhost`.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Restrict Seccomp
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: restrict-seccomp
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: check-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, spec.initContainers[*].securityContext.seccompProfile.type,
        and spec.ephemeralContainers[*].securityContext.seccompProfile.type must be
        unset or set to `RuntimeDefault` or `Localhost`.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
          =(securityContext):
            =(seccompProfile):
              =(type): RuntimeDefault | Localhost
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node. This
      policy ensures that only those "safe" subsets can be specified in a Pod.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Restrict sysctls
  labels:
    app.kubernetes.io/component: kyverno
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno-policies
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-policies-3.2.0
  name: restrict-sysctls
  namespace: kyverno
spec:
  background: true
  failurePolicy: Fail
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: check-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must be unset or not use any other names
        than kernel.shm_rmid_forced, net.ipv4.ip_local_port_range, net.ipv4.ip_unprivileged_port_start,
        net.ipv4.tcp_syncookies and net.ipv4.ping_group_range.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - =(name): kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.ip_unprivileged_port_start
                | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
  validationFailureAction: Audit
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/component: test
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-admission-controller-liveness
  namespace: kyverno
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - sleep 20 ; wget -O- -S --no-check-certificate https://kyverno-svc.default:443/health/liveness
    image: busybox:1.35
    imagePullPolicy: IfNotPresent
    name: test
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/component: test
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-admission-controller-metrics
  namespace: kyverno
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - sleep 20 ; wget -O- -S --no-check-certificate http://kyverno-svc-metrics.default:8000/metrics
    image: busybox:1.35
    imagePullPolicy: IfNotPresent
    name: test
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/component: test
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-admission-controller-readiness
  namespace: kyverno
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - sleep 20 ; wget -O- -S --no-check-certificate https://kyverno-svc.default:443/health/readiness
    image: busybox:1.35
    imagePullPolicy: IfNotPresent
    name: test
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/component: test
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-controller-liveness
  namespace: kyverno
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - sleep 20 ; wget -O- -S --no-check-certificate https://kyverno-cleanup-controller.default:443/health/liveness
    image: busybox:1.35
    imagePullPolicy: IfNotPresent
    name: test
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/component: test
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-controller-metrics
  namespace: kyverno
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - sleep 20 ; wget -O- -S --no-check-certificate http://kyverno-cleanup-controller-metrics.default:8000/metrics
    image: busybox:1.35
    imagePullPolicy: IfNotPresent
    name: test
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/component: test
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-cleanup-controller-readiness
  namespace: kyverno
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - sleep 20 ; wget -O- -S --no-check-certificate https://kyverno-cleanup-controller.default:443/health/readiness
    image: busybox:1.35
    imagePullPolicy: IfNotPresent
    name: test
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/component: test
    app.kubernetes.io/instance: kyverno
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: kyverno-3.2.0
  name: kyverno-reports-controller-metrics
  namespace: kyverno
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - sleep 20 ; wget -O- -S --no-check-certificate http://kyverno-reports-controller-metrics.default:8000/metrics
    image: busybox:1.35
    imagePullPolicy: IfNotPresent
    name: test
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
  restartPolicy: Never
