apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  labels:
    app: minio
    backstage.io/kubernetes-id: minio-tenant
  name: myminio
  namespace: minio-tenant
spec:
  certConfig: {}
  configuration:
    name: storage-configuration
  env:
  - name: MINIO_DOMAIN
    value: minio.k8s.integratn.tech
  - name: MINIO_BROWSER_REDIRECT_URL
    value: https://console.k8s.integratn.tech
  - name: MINIO_SERVER_URL
    value: https://minio.k8s.integratn.tech
  externalCaCertSecret: []
  externalCertSecret: []
  externalClientCertSecrets: []
  features:
    bucketDNS: false
    domains: {}
  image: quay.io/minio/minio:RELEASE.2023-07-21T21-12-44Z
  imagePullSecret: {}
  mountPath: /export
  podManagementPolicy: Parallel
  pools:
  - affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    containerSecurityContext:
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    name: pool-0
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    servers: 2
    tolerations: []
    topologySpreadConstraints: []
    volumeClaimTemplate:
      apiVersion: v1
      kind: persistentvolumeclaims
      metadata: {}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 20G
        storageClassName: directpv-min-io
      status: {}
    volumesPerServer: 2
  priorityClassName: ""
  prometheus:
    affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    diskCapacityGB: 1
    env: []
    image: quay.io/prometheus/prometheus:latest
    initimage: busybox:1.33.1
    labels: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccountName: ""
    sidecarimage: alpine
    storageClassName: standard
  requestAutoCert: false
  serviceAccountName: ""
  serviceMetadata:
    consoleServiceAnnotations: {}
    consoleServiceLabels: {}
    minioServiceAnnotations: {}
    minioServiceLabels: {}
  subPath: ""
  users:
  - name: storage-user
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  labels:
    backstage.io/kubernetes-id: minio-tenant
  name: tenant-ingress
  namespace: minio-tenant
spec:
  ingressClassName: nginx
  rules:
  - host: minio.k8s.integratn.tech
    http:
      paths:
      - backend:
          service:
            name: minio
            port:
              number: 80
        path: /
        pathType: Prefix
  - host: console.k8s.integratn.tech
    http:
      paths:
      - backend:
          service:
            name: myminio-console
            port:
              number: 9090
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - minio.k8s.integratn.tech
    - console.k8s.integratn.tech
    secretName: tenant-tls
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    backstage.io/kubernetes-id: minio-tenant
  name: storage-configuration
  namespace: minio-tenant
spec:
  itemPath: vaults/homelab/items/minio-storage-configuration
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    backstage.io/kubernetes-id: minio-tenant
  name: storage-user
  namespace: minio-tenant
spec:
  itemPath: vaults/homelab/items/minio-tenant
